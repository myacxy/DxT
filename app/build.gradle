apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.23.0'
    }
}

def versionMajor = 0
def versionMinor = 2
def versionPatch = 0
def versionBuild = 0

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId 'net.myacxy.squinch'
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            useProguard true
            minifyEnabled true
            proguardFiles file('../proguard-files').listFiles().toList().toArray()
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            debuggable false
        }

        debug {
            useProguard false
            minifyEnabled true
            proguardFiles file('../proguard-files').listFiles().toList().toArray()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix '.dev'
            versionNameSuffix '#dev'
            debuggable true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

def Properties props = new Properties()
def propFile = new File(project.rootDir, 'signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('storeFile') && props.containsKey('storePassword') &&
            props.containsKey('keyAlias') && props.containsKey('keyPassword')) {
        android.signingConfigs.release.storeFile new File(project.rootDir, props['storeFile'])
        android.signingConfigs.release.storePassword props['storePassword']
        android.signingConfigs.release.keyAlias props['keyAlias']
        android.signingConfigs.release.keyPassword props['keyPassword']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}

dependencies {
    implementation project(':data')
    implementation files('libs/retrotwitch-rxjava.jar')

    implementation deps.android.support.appCompat
    implementation deps.android.support.v4
    implementation deps.android.support.design
    implementation deps.android.support.recyclerView
    implementation deps.android.support.palette
    implementation deps.android.support.constraintLayout

    implementation deps.butterknife.runtime
    kapt deps.butterknife.compiler
    kapt deps.android.databinding

    kapt deps.dagger.compiler
    kapt deps.dagger.android.compiler

    implementation deps.dashclock
    implementation deps.fresco
    implementation(deps.crashlytics) {
        transitive = true
    }
    implementation deps.eventBus
    implementation deps.timber

    debugImplementation deps.leakCanary.real
    releaseImplementation deps.leakCanary.noOp

    testImplementation deps.junit
}
