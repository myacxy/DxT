buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        // The Fabric Gradle plugin uses an open ended version to react
        // quickly to Android tooling updates
        classpath 'io.fabric.tools:gradle:1.23.0'
        classpath 'me.tatarka:gradle-retrolambda:3.6.1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'me.tatarka.retrolambda'

def versionMajor = 0
def versionMinor = 2
def versionPatch = 0
def versionBuild = 0

android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion

    defaultConfig {
        applicationId 'net.myacxy.squinch'
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            useProguard true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            useProguard true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-dev.pro'
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        prod {}

        dev {
            applicationIdSuffix '.dev'
            versionNameSuffix '#dev'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

def Properties props = new Properties()
def propFile = new File(project.rootDir, 'signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('storeFile') && props.containsKey('storePassword') &&
            props.containsKey('keyAlias') && props.containsKey('keyPassword')) {
        android.signingConfigs.release.storeFile new File(project.rootDir, props['storeFile'])
        android.signingConfigs.release.storePassword props['storePassword']
        android.signingConfigs.release.keyAlias props['keyAlias']
        android.signingConfigs.release.keyPassword props['keyPassword']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}

dependencies {
    compile files('libs/retrotwitch-rxjava.jar')

    Map<String, String> dependencies = rootProject.ext.dependencies;

    compile(dependencies.crashlytics) {
        transitive = true;
    }
    compile dependencies.dashclock
    compile dependencies.eventBus
    compile dependencies.logger
    compile(dependencies.rxAndroid) {
        exclude module: 'rxjava'
    }
    compile dependencies.butterknife
    annotationProcessor dependencies.butterknifeApt

    compile dependencies.appCompat
    compile dependencies.design
    compile dependencies.recyclerView
    compile dependencies.palette

//    compile dependencies.rxBindingRecyclerView
    compile dependencies.fresco

    debugCompile dependencies.leakCanary
    releaseCompile dependencies.leakCanaryNoOp

    testCompile dependencies.junit
}